
module Pedals:
    function regulateThrottle(boolean, float, float) : float;

	%interface declarations
    input On;
    input Off;
    input Resume;
    input Set;
    input QuickDecel;
    input QuickAccel;

	input Accel: float;
	input Brake: float;
	input Speed: float;
	
	output CruiseSpeed: float;
	output ThrottleCmd: float;
    output CruiseState: integer;

	constant PedalsMin = 3.0f : float;
    constant SpeedMax = 150.0f : float;
    constant SpeedMin = 30.0f : float;
    constant SpeedInc = 2.5f : float;
    constant Kp = 8.133f : float;
    constant Ki = 0.5f : float; 
    constant ThrottleSatMax = 45.0f : float;
    constant zero = 0.0f : float;
	
	output AccelPedal: boolean;
    output BrakePedal: boolean; 

    await On;


    
    
	loop
        if ((?Accel) > PedalsMin) then 
            emit AccelPedal(true);
        else 
            emit AccelPedal(false);
        end if;
        if ((?Brake) > PedalsMin) then 
            emit BrakePedal(true);
        else 
            emit BrakePedal(false); 
        end if;
        await tick; 	
	end loop
   
    ||
    

    % state control

    % 00 = OFF 
    % 01 = ON 
    % 02 = STDBY 
    % 03 = DISABLE

    emit CruiseState(0);
    await On;
    
    loop 
        present 
            case (Off and not On) do 
                emit CruiseState(0);

            case (On) do 
               
                emit CruiseState(1);
               
            case (Resume) do 
                if ((pre(?CruiseState) = 2)) then 
                    if (((?Speed) >= (SpeedMin) and not (?Speed) > (SpeedMax)) and not pre(?AccelPedal)) then 
                        emit CruiseState(1);

                    elsif ((?Speed) < (SpeedMin) or (?Speed) > (SpeedMax)) or pre(?AccelPedal) then 
                        emit CruiseState(3);
                    else
                        emit CruiseState(2);
                    end if;
                else 
                    emit CruiseState(pre(?CruiseState));
                end if;
            else 
                if (pre(?BrakePedal) and not (pre(?AccelPedal))) then 
                    emit CruiseState(2);
                        
                elsif (((pre(?AccelPedal)) and not pre(?BrakePedal)) or (pre(?Speed) < (SpeedMin) or pre(?Speed) > (SpeedMax))) then                       
                    emit CruiseState(3);      

                elsif (not pre(?BrakePedal) and not (pre(?AccelPedal))) then
                        emit CruiseState(1);
                else 
                    emit CruiseState(pre(?CruiseState));
                end if;
        end present;
        pause;
    end loop 


    ||

    await On; 

    
    % car driving control
    
    var throttle := 0.0f : float in
    loop
        if(pre(?CruiseState) = 1) then 
            if ((pre(?CruiseState)= 0)) then 
            throttle := (regulateThrottle(true, ?CruiseSpeed, ?Speed));
                emit ThrottleCmd(throttle);
            elsif not ((pre(?CruiseState)= 0)) then 
            throttle := (regulateThrottle(false, ?CruiseSpeed, ?Speed));
                emit ThrottleCmd(throttle);
            else
                emit ThrottleCmd(?Accel);
            end if;
        elsif(pre(?CruiseState) = 0) and (?Accel) >= zero then 
            emit ThrottleCmd(?Accel);
        else 
            emit ThrottleCmd(?Accel);
        end if;
        pause;
    end loop
    end var


    ||

    await On; 

    % cruise speed management 
    var value := 0.0f : float in
    loop
        present 
            case On do 
                if (pre(?CruiseState) = 0) then 
                    emit CruiseSpeed(?Speed);
                else  
                    emit CruiseSpeed(pre(?CruiseSpeed));
                end if;
            case Set do 
                emit CruiseSpeed(?Speed);
            case QuickAccel do 
                if ((?Speed + SpeedInc) < SpeedMax) then 
                    value := ?Speed + SpeedInc;
                    emit CruiseSpeed(value);
                else
                    emit CruiseSpeed(SpeedMax);
                end if;

            case QuickDecel do 
                if (((?Speed - SpeedInc) > SpeedMin)) then 
                    value := ?Speed - SpeedInc;
                    emit CruiseSpeed(value);
                else
                    emit CruiseSpeed(SpeedMin);
                end if;
            else 
                emit CruiseSpeed(zero);
        end present;
        await tick;
    end loop
    end var
end module