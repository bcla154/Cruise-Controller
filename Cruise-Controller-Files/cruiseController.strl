
module Pedals:
    function regulateThrottle(boolean, float, float) : float;

	%interface declarations
    input On;
    input Off;
    input Resume;
    input Set;
    input QuickDecel;
    input QuickAccel;

	input Accel: float;
	input Brake: float;
	input Speed: float;
	
	output CruiseSpeed: float;
	output ThrottleCmd: float;
    output CruiseState: string;

	constant PedalsMin = 3.0f : float;
    constant SpeedMax = 150.0f : float;
    constant SpeedMin = 30.0f : float;
    constant SpeedInc = 2.5f : float;
    constant Kp = 8.133f : float;
    constant Ki = 0.5f : float; 
    constant ThrottleSatMax = 45.0f : float;
    constant zero = 0.0f : float;

    constant OnState = "ON": string; 
    constant OffState = "OFF": string; 
    constant StandbyState = "STDBY": string; 
    constant DisableState = "DISABLE": string; 

	
	output AccelPedal: boolean;
    output BrakePedal: boolean; 

    await On;

	loop
        if ((?Accel) > PedalsMin) then 
            emit AccelPedal(true);
        else 
            emit AccelPedal(false);
        end if;
        if ((?Brake) > PedalsMin) then 
            emit BrakePedal(true);
        else 
            emit BrakePedal(false); 
        end if;
        await tick; 	
	end loop
   
    ||
    

    % state control

    % 00 = OFF 
    % 01 = ON 
    % 02 = STDBY 
    % 03 = DISABLE

    emit CruiseState(OffState);
    await On;
    
    loop 
        present 
            case (Off and not On) do 
                emit CruiseState(OffState);

            case (On) do 
               
                emit CruiseState(OnState);
               
            case (Resume) do 
                if ((pre(?CruiseState) = StandbyState)) then 
                    if (((?Speed) >= (SpeedMin) and not (?Speed) > (SpeedMax)) and not pre(?AccelPedal)) then 
                        emit CruiseState(OnState);

                    elsif ((?Speed) < (SpeedMin) or (?Speed) > (SpeedMax)) or pre(?AccelPedal) then 
                        emit CruiseState(DisableState);
                    else
                        emit CruiseState(StandbyState);
                    end if;
                else 
                    emit CruiseState(pre(?CruiseState));
                end if;
            else 

                if not (pre(?CruiseState) = OffState) then 
                    if (pre(?BrakePedal) and not (pre(?AccelPedal))) then 
                        emit CruiseState(StandbyState);
                                
                    elsif (((pre(?AccelPedal)) and not pre(?BrakePedal)) or (pre(?Speed) < (SpeedMin) or pre(?Speed) > (SpeedMax))) then                       
                        emit CruiseState(DisableState);      

                    elsif (not pre(?BrakePedal) and not (pre(?AccelPedal))) then
                            emit CruiseState(OnState);
                    else 
                        emit CruiseState(pre(?CruiseState));
                    end if;
                else
                    emit CruiseState(OffState);
                end if;
            
            
        end present;
        pause;
    end loop 


    ||

    await On; 

    
    % car driving control
    
    var throttle := 0.0f : float in
    loop
        if(pre(?CruiseState) = OnState) then 
            if ((pre(?CruiseState)= OffState)) then 
            throttle := (regulateThrottle(true, ?CruiseSpeed, ?Speed));
                emit ThrottleCmd(throttle);
            elsif not ((pre(?CruiseState)= OnState)) then 
            throttle := (regulateThrottle(false, ?CruiseSpeed, ?Speed));
                emit ThrottleCmd(throttle);
            else
                emit ThrottleCmd(?Accel);
            end if;
        elsif(pre(?CruiseState) = OffState) and (?Accel) >= zero then 
            emit ThrottleCmd(?Accel);
        else 
            emit ThrottleCmd(?Accel);
        end if;
        pause;
    end loop
    end var


    ||

    await On; 

    % cruise speed management 
    var value := 0.0f : float in
    loop
        present 
            case On do 
                if (pre(?CruiseState) = OffState) then 
                    if ((?Speed) < SpeedMin) then
                        emit CruiseSpeed(SpeedMin);
                    elsif ((?Speed) > SpeedMax) then
                        emit CruiseSpeed(SpeedMax);
                    else
                        emit CruiseSpeed(?Speed);
                    end if
                else  
                    emit CruiseSpeed(pre(?CruiseSpeed));
                end if;
            case Set do 
                if ((?Speed) < SpeedMin) then
                    emit CruiseSpeed(SpeedMin);
                elsif ((?Speed) > SpeedMax) then
                    emit CruiseSpeed(SpeedMax);
                else
                    emit CruiseSpeed(?Speed);
                end if

            case QuickAccel do 
                if not (pre(?CruiseState) = OffState) then 
                    if ((pre(?CruiseSpeed) + SpeedInc) < SpeedMax) then 
                        value := pre(?CruiseSpeed) + SpeedInc;
                        emit CruiseSpeed(value);
                    else
                        emit CruiseSpeed(SpeedMax);
                    end if;
                else 
                    emit CruiseSpeed(pre(?CruiseSpeed));
                end if; 

            case QuickDecel do 
                if not (pre(?CruiseState) = OffState) then 
                    if ((pre(?CruiseSpeed) - SpeedInc) > SpeedMin) then 
                        value := pre(?CruiseSpeed) - SpeedInc;
                        emit CruiseSpeed(value);
                    else
                        emit CruiseSpeed(SpeedMin);
                    end if;
                else    
                    emit CruiseSpeed(pre(?CruiseSpeed));
                end if; 
            else 
                emit CruiseSpeed(pre(?CruiseSpeed));
        end present;
        await tick;
    end loop
    end var
end module