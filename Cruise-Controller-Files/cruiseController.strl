
module Pedals:
    function regulateThrottle(boolean, float, float) : float;

	%interface declarations
    input On : boolean;
    input Off : boolean;
    input Resume : boolean;
    input Set : boolean;
    input QuickDecel : boolean;
    input QuickAccel : boolean;

	input Accel: float;
	input Brake: float;
	input Speed: float;
	
	output CruiseSpeed: float;
	output ThrottleCmd: float;
    output CruiseState: integer;

	constant PedalsMin = 3.0f : float;
    constant SpeedMax = 150.0f : float;
    constant SpeedMin = 30.0f : float;
    constant SpeedInc = 2.5f : float;
    constant Kp = 8.133f : float;
    constant Ki = 0.5f : float; 
    constant ThrottleSatMax = 45.0f : float;
    constant zero = 0.0f : float;
	
	output AccelPedal: boolean;
    output BrakePedal: boolean; 


    emit Accel(zero);
    
	loop
        if ((?Accel) > PedalsMin) then 
            emit AccelPedal(true);
        else 
            emit AccelPedal(false);
        end if;
        if ((?Brake) > PedalsMin) then 
            emit BrakePedal(true);
        else 
            emit BrakePedal(false); 
        end if;
        pause	
	end loop
   
    
    ||

    % state control

    % 00 = OFF 
    % 01 = ON 
    % 02 = STDBY 
    % 03 = DISABLE
    
    loop 
        present 
            case (Off)  do 
                emit CruiseState(0);

            case (On) do 
                present 
                    case (pre(BrakePedal)) do 
                        emit CruiseState(2)

                    case ((AccelPedal) and not (BrakePedal)) do 
                        if (?Speed) >= (SpeedMin) and not (?Speed) > (SpeedMax) then 
                            emit CruiseState(1)
        
                        elsif (?Speed) > (SpeedMax) then 
                            emit CruiseState(3)
                
                        elsif (?Speed) < (SpeedMin) then 
                            emit CruiseState(3)
                        else 
                            emit CruiseState(1)
                        end if;

                    else 
                        emit CruiseState(1)
                end present;
            case (Resume) do 
                if (((?CruiseState) = 2)) then 
                    if ((?Speed) >= (SpeedMin) and not (?Speed) > (SpeedMax)) and not (?AccelPedal) then 
                        emit CruiseState(1)

                    elsif ((?Speed) < (SpeedMin) or (?Speed) > (SpeedMax)) or (?AccelPedal) then 
                        emit CruiseState(3)
                    else
                        emit CruiseState(2)
                    end if;
                else 
                    emit CruiseState(pre(?CruiseState))
            end if;

            case (AccelPedal) do 
                if (?CruiseState = 1) and (((?Speed) < SpeedMin) or ((?Speed) > SpeedMax)) then 
                    emit CruiseState(3)
                end if;            
            case (not AccelPedal) do 
                if (?CruiseState = 3) then 
                    if ((?Speed > SpeedMin) and (?Speed <= SpeedMax)) then 
                        emit CruiseState(1)
                    else 
                        emit CruiseState(3)
                    end if;   
                end if;
            else 
                emit CruiseState(pre(?CruiseState))
        end present;
        pause;
    end loop 


    ||

    
    % car driving control
    
    var throttle := 0.0f : float in
    loop
        if((?CruiseState) = 1) and ((pre(?CruiseState)= 0)) then 
            throttle := (regulateThrottle(true, ?CruiseSpeed, ?Speed));
            pause;
            emit ThrottleCmd(throttle);
        elsif ((?CruiseState) = 1) and not ((pre(?CruiseState)= 0)) then 
            throttle := (regulateThrottle(false, ?CruiseSpeed, ?Speed));
            pause;
            emit ThrottleCmd(throttle);
        elsif((?CruiseState) = 0) and (?Accel) >= zero then 
            emit ThrottleCmd(?Accel);
        end if; 
        pause;
    end loop
    end var


    ||

    % cruise speed management 
    var value := 0.0f : float in
    loop
        if not (?CruiseState = 0) then  
            if ((?On) or (?Set)) and pre(?CruiseState) = 0 then 
                 if (?Speed < SpeedMin) then 
                    emit CruiseSpeed(SpeedMin);
                    
                elsif (?Speed > SpeedMax) then 
                    emit CruiseSpeed(SpeedMax);
                   
                else 
                    emit CruiseSpeed(?Speed);
                    
                end if;

            elsif (?Set) then 
                if (?Speed < SpeedMin) then 
                    emit CruiseSpeed(SpeedMin);
                elsif (?Speed > SpeedMax) then 
                    emit CruiseSpeed(SpeedMax);
                else 
                    emit CruiseSpeed(?Speed);
                end if;
        
            elsif (?QuickAccel) then 
                value := pre(?CruiseSpeed) + SpeedInc; 
                if (value <= SpeedMax) then
                    emit CruiseSpeed(value);
                else 
                    emit CruiseSpeed(?CruiseSpeed);
                end if;

            elsif (?QuickDecel) then 
                value := pre(?CruiseSpeed) - SpeedInc; 
                if ((value) >= SpeedMin) then 
                    emit CruiseSpeed(value);
                else 
                    emit CruiseSpeed(?CruiseSpeed);
                end if;
            end if;
        end if;
        pause;
    end loop
    end var
end module